/**

@page style_guide Style Guide

@tableofcontents

@section style_guide_intro Introduction

MiniMC primarily adheres to the
<a href="https://google.github.io/styleguide/cppguide.html">Google C++ Style
Guide</a> for source code style. Cases which are not addressed in the Google
C++ Style Guide are addressed individually here.

@section style_guide_friend_declaration Friend Declarations

<code>friend</code> declarations occur at the very beginning of a class
declaration, before any access specifiers such as <code>private</code>, <code>
public</code>, or <code>protected</code>.

@section style_guide_variable_assignment Variable Assignments

There exist two ways to initialize variables: <em> direct initialization </em>
and <em> copy initialization </em>:
@code{.cpp}
  // Direct initialization
  auto int(42);
  // Copy initialization
  auto x = 42;
@endcode

Although both styles are totally valid, we prefer to use direct initialization
as it is more explicit in naming the initialized variable's type. It also
avoids a potentially expensive copy operation in certain scenarios. Of course,
there will always be cases where copy initialization is simply clearer without
the cost of an expensive copy (such as initializing a reference or copying an
rvalue for which there is a move constructor) so the choice is ultimately up
to an informed developer's discretion.

*/
