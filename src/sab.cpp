#include "Constants.hpp"
#include "Particle.hpp"
#include "ThermalScattering.hpp"
#include "XMLDocument.hpp"

#include <algorithm>
#include <array>
#include <cmath>
#include <iostream>
#include <iterator>
#include <fstream>
#include <string>

int main(int argc, char* argv[]) {
  std::ofstream outfile{"sab_values.out"};
  std::cout << "S(a,b) sampler..." << std::endl;
  constexpr size_t samples = 1e8;
  constexpr size_t n_E = 272;
  constexpr size_t n_mu = 182;
  std::array<double, n_E> E_boundaries = {
      1.83409702e-08, 4.11114117e-08, 5.93277648e-08, 7.40020492e-08,
      8.53872700e-08, 1.06892687e-07, 1.27993296e-07, 1.39783324e-07,
      1.53951599e-07, 1.67613864e-07, 1.80011104e-07, 2.03034551e-07,
      2.21756914e-07, 2.35925188e-07, 2.47816419e-07, 2.68815826e-07,
      2.90321243e-07, 3.04236512e-07, 3.16380748e-07, 3.37127150e-07,
      3.58885572e-07, 3.72547837e-07, 3.84995678e-07, 4.05438474e-07,
      4.26690886e-07, 4.40859161e-07, 4.52750391e-07, 4.76279848e-07,
      4.95255215e-07, 5.09170485e-07, 5.21314721e-07, 5.39531074e-07,
      5.63996648e-07, 5.74951760e-07, 5.90003022e-07, 6.04806339e-07,
      6.19733628e-07, 6.33648898e-07, 6.47311163e-07, 6.57734965e-07,
      6.71599634e-07, 6.84755889e-07, 6.96394115e-07, 7.07273325e-07,
      7.17646526e-07, 7.26370136e-07, 7.36874899e-07, 7.46995095e-07,
      7.56103272e-07, 7.64705439e-07, 7.72801596e-07, 7.80644748e-07,
      7.88234895e-07, 7.94990126e-07, 8.02403170e-07, 8.09234302e-07,
      8.15559425e-07, 8.21884547e-07, 8.27703660e-07, 8.33269768e-07,
      8.38835876e-07, 8.43895974e-07, 8.48956072e-07, 8.53763165e-07,
      8.58317253e-07, 8.62732189e-07, 8.66919420e-07, 8.70967499e-07,
      8.75015577e-07, 8.78557646e-07, 8.82352719e-07, 8.85641783e-07,
      8.88930847e-07, 8.92219911e-07, 8.95255970e-07, 8.98039023e-07,
      9.00822077e-07, 9.03605131e-07, 9.06135180e-07, 9.08665229e-07,
      9.10942274e-07, 9.13219318e-07, 9.15496362e-07, 9.17520401e-07,
      9.19544440e-07, 9.21315475e-07, 9.23339514e-07, 9.25110548e-07,
      9.26628578e-07, 9.28399612e-07, 9.29917641e-07, 9.31367360e-07,
      9.32953700e-07, 9.34218725e-07, 9.35483749e-07, 9.36748774e-07,
      9.38013798e-07, 9.39278823e-07, 9.40543847e-07, 9.41808872e-07,
      9.43073896e-07, 9.44338921e-07, 9.45603946e-07, 9.46868970e-07,
      9.48133995e-07, 9.49399019e-07, 9.50664044e-07, 9.51929068e-07,
      9.53194093e-07, 9.54459117e-07, 9.55724142e-07, 9.56989166e-07,
      9.58254191e-07, 9.59519215e-07, 9.60784240e-07, 9.62049264e-07,
      9.63314289e-07, 9.64579313e-07, 9.65844338e-07, 9.67109362e-07,
      9.68374387e-07, 9.69639411e-07, 9.70904436e-07, 9.72169460e-07,
      9.73434485e-07, 9.74699510e-07, 9.75964534e-07, 9.77229559e-07,
      9.78494583e-07, 9.79759608e-07, 9.81024632e-07, 9.82289657e-07,
      9.83554681e-07, 9.84819706e-07, 9.86084730e-07, 9.87349755e-07,
      9.88614779e-07, 9.89879804e-07, 9.91144828e-07, 9.92409853e-07,
      9.93674877e-07, 9.94939902e-07, 9.96204926e-07, 9.97469951e-07,
      9.98102463e-07, 9.98734975e-07, 9.99367488e-07, 9.99746995e-07,
      9.99873498e-07, 1.00000000e-06, 1.00012650e-06, 1.00025300e-06,
      1.00063251e-06, 1.00126502e-06, 1.00189754e-06, 1.00253005e-06,
      1.00379507e-06, 1.00506010e-06, 1.00632512e-06, 1.00759015e-06,
      1.00885517e-06, 1.01012020e-06, 1.01138522e-06, 1.01265025e-06,
      1.01391527e-06, 1.01518029e-06, 1.01644532e-06, 1.01771034e-06,
      1.01897537e-06, 1.02024039e-06, 1.02150542e-06, 1.02277044e-06,
      1.02403547e-06, 1.02530049e-06, 1.02656551e-06, 1.02783054e-06,
      1.02909556e-06, 1.03036059e-06, 1.03162561e-06, 1.03289064e-06,
      1.03415566e-06, 1.03542069e-06, 1.03668571e-06, 1.03795074e-06,
      1.03921576e-06, 1.04048078e-06, 1.04174581e-06, 1.04301083e-06,
      1.04427586e-06, 1.04554088e-06, 1.04680591e-06, 1.04807093e-06,
      1.04933596e-06, 1.05060098e-06, 1.05186601e-06, 1.05313103e-06,
      1.05439605e-06, 1.05566108e-06, 1.05692610e-06, 1.05819113e-06,
      1.05945615e-06, 1.06072118e-06, 1.06198620e-06, 1.06325123e-06,
      1.06451625e-06, 1.06578128e-06, 1.06704630e-06, 1.06863264e-06,
      1.07008236e-06, 1.07160039e-06, 1.07337142e-06, 1.07488945e-06,
      1.07666049e-06, 1.07868453e-06, 1.08045556e-06, 1.08247960e-06,
      1.08450364e-06, 1.08678068e-06, 1.08905773e-06, 1.09133477e-06,
      1.09386482e-06, 1.09639487e-06, 1.09917792e-06, 1.10196098e-06,
      1.10474403e-06, 1.10778009e-06, 1.11106915e-06, 1.11435822e-06,
      1.11764728e-06, 1.12144235e-06, 1.12498442e-06, 1.12903250e-06,
      1.13308058e-06, 1.13726781e-06, 1.14168275e-06, 1.14623683e-06,
      1.15104393e-06, 1.15610403e-06, 1.16116412e-06, 1.16673023e-06,
      1.17229634e-06, 1.17811545e-06, 1.18444058e-06, 1.19076570e-06,
      1.19759683e-06, 1.20500987e-06, 1.21176511e-06, 1.21935525e-06,
      1.22719840e-06, 1.23529456e-06, 1.24389673e-06, 1.25300490e-06,
      1.26312510e-06, 1.27362986e-06, 1.28235347e-06, 1.29272667e-06,
      1.30360589e-06, 1.31524411e-06, 1.32840037e-06, 1.34226503e-06,
      1.35268884e-06, 1.36635110e-06, 1.38026637e-06, 1.39519366e-06,
      1.40999698e-06, 1.42504824e-06, 1.43600335e-06, 1.46046893e-06,
      1.47868528e-06, 1.49082951e-06, 1.50474478e-06, 1.50600981e-06};
  std::array<double, n_mu> mu_boundaries = {
      -0.98901099, -0.97802198, -0.96703297, -0.95604396, -0.94505495,
      -0.93406593, -0.92307692, -0.91208791, -0.9010989,  -0.89010989,
      -0.87912088, -0.86813187, -0.85714286, -0.84615385, -0.83516484,
      -0.82417582, -0.81318681, -0.8021978,  -0.79120879, -0.78021978,
      -0.76923077, -0.75824176, -0.74725275, -0.73626374, -0.72527473,
      -0.71428571, -0.7032967,  -0.69230769, -0.68131868, -0.67032967,
      -0.65934066, -0.64835165, -0.63736264, -0.62637363, -0.61538462,
      -0.6043956,  -0.59340659, -0.58241758, -0.57142857, -0.56043956,
      -0.54945055, -0.53846154, -0.52747253, -0.51648352, -0.50549451,
      -0.49450549, -0.48351648, -0.47252747, -0.46153846, -0.45054945,
      -0.43956044, -0.42857143, -0.41758242, -0.40659341, -0.3956044,
      -0.38461538, -0.37362637, -0.36263736, -0.35164835, -0.34065934,
      -0.32967033, -0.31868132, -0.30769231, -0.2967033,  -0.28571429,
      -0.27472527, -0.26373626, -0.25274725, -0.24175824, -0.23076923,
      -0.21978022, -0.20879121, -0.1978022,  -0.18681319, -0.17582418,
      -0.16483516, -0.15384615, -0.14285714, -0.13186813, -0.12087912,
      -0.10989011, -0.0989011,  -0.08791209, -0.07692308, -0.06593407,
      -0.05494505, -0.04395604, -0.03296703, -0.02197802, -0.01098901,
      0.,          0.01098901,  0.02197802,  0.03296703,  0.04395604,
      0.05494505,  0.06593407,  0.07692308,  0.08791209,  0.0989011,
      0.10989011,  0.12087912,  0.13186813,  0.14285714,  0.15384615,
      0.16483516,  0.17582418,  0.18681319,  0.1978022,   0.20879121,
      0.21978022,  0.23076923,  0.24175824,  0.25274725,  0.26373626,
      0.27472527,  0.28571429,  0.2967033,   0.30769231,  0.31868132,
      0.32967033,  0.34065934,  0.35164835,  0.36263736,  0.37362637,
      0.38461538,  0.3956044,   0.40659341,  0.41758242,  0.42857143,
      0.43956044,  0.45054945,  0.46153846,  0.47252747,  0.48351648,
      0.49450549,  0.50549451,  0.51648352,  0.52747253,  0.53846154,
      0.54945055,  0.56043956,  0.57142857,  0.58241758,  0.59340659,
      0.6043956,   0.61538462,  0.62637363,  0.63736264,  0.64835165,
      0.65934066,  0.67032967,  0.68131868,  0.69230769,  0.7032967,
      0.71428571,  0.72527473,  0.73626374,  0.74725275,  0.75824176,
      0.76923077,  0.78021978,  0.79120879,  0.8021978,   0.81318681,
      0.82417582,  0.83516484,  0.84615385,  0.85714286,  0.86813187,
      0.87912088,  0.89010989,  0.9010989,   0.91208791,  0.92307692,
      0.93406593,  0.94505495,  0.95604396,  0.96703297,  0.97802198,
      0.98901099,  1.};
  std::array<size_t, mu_boundaries.size() * E_boundaries.size()> counts = {0};
  pugi::xml_node tsl_node{
      XMLDocument{argv[1]}
          .root
          .select_node("/minimc/nuclides/continuous/nuclide[@name='hydrogen']/"
                       "neutron/scatter/tsl")
          .node()};
  ThermalScattering sab{tsl_node};
  Real awr = tsl_node.parent().parent().parent().attribute("awr").as_double();
  for (RNG::result_type seed = 1; seed <= samples; seed++){
    if (seed % static_cast<size_t>(1e7) == 0){
      const auto percent = static_cast<double>(seed) / samples * 100;
      std::cout << percent << "%..." << std::endl;
    }
    Particle p{
        Point{}, Direction{1, 0, 0}, 1.0e-6, Particle::Type::neutron, seed};
    const auto E = std::get<ContinuousEnergy>(p.GetEnergy());
    const Temperature T = 498.6;
    const auto beta = sab.SampleBeta(p, E, T);
    const auto alpha = sab.SampleAlpha(p, beta, E, T);
    const ContinuousEnergy E_prime = E + beta * constants::boltzmann * 1e-6 * T;
    const Real mu =
        (E + E_prime - alpha * awr * constants::boltzmann * 1e-6 * T) /
        std::sqrt(E * E_prime);
    // place in bin
    const size_t E_bin = std::distance(
        E_boundaries.cbegin(),
        std::upper_bound(E_boundaries.cbegin(), E_boundaries.cend(), E_prime));
    const size_t mu_bin = std::distance(
        mu_boundaries.cbegin(),
        std::upper_bound(mu_boundaries.cbegin(), mu_boundaries.cend(), mu));
    counts[mu_bin * n_E + E_bin]++;
  }
  for (auto count: counts) {
    outfile << count << std::endl;
  }
}
